{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://sfdl/./src/sfdl/apexLog/apexLog.ts","webpack://sfdl/./src/sfdl/apexLog/apexLogAction.ts","webpack://sfdl/./src/sfdl/apexLog/apexLogMenu.ts","webpack://sfdl/./src/sfdl/apexLog/apexLogValidation.ts","webpack://sfdl/./src/sfdl/displayMenu.ts","webpack://sfdl/./src/sfdl/general/noMenu.ts","webpack://sfdl/./src/sfdl/log.ts","webpack://sfdl/./src/sfdl/logAction.ts","webpack://sfdl/./src/sfdl/logMenu.ts","webpack://sfdl/./src/sfdl/logProcessor.ts","webpack://sfdl/./src/sfdl/logValidation.ts","webpack://sfdl/./src/sfdl/utils.ts","webpack://sfdl/external commonjs \"vscode\"","webpack://sfdl/webpack/bootstrap","webpack://sfdl/./src/extension.ts"],"sourcesContent":["import { ILogAction } from \"../iLogAction\";\nimport { ILogValidation } from \"../iLogValidation\";\nimport { LogMenu } from \"../logMenu\";\nimport { LogProcessor } from \"../logProcessor\";\n\nexport class ApexLog extends LogProcessor {\n    logMenu: LogMenu;\n    validation: ILogValidation;\n    action: ILogAction;\n    successMessage = 'Salesforce Debug Logs executed!';\n    exceptionMessage = 'Salesforce Debug Logs can\\'t process the file. Invalid Apex Log.';\n\n    constructor(private _logMenu: LogMenu, private _validation: ILogValidation, private _action: ILogAction){\n        super();\n        this.logMenu = _logMenu;\n        this.validation = _validation;\n        this.action = _action;\n    }\n}","import { LogAction } from \"../logAction\";\n\nenum LOG_LINE_FILTER {\n    HEAP_ALLOCATE = 'HEAP_ALLOCATE',\n    STATEMENT_EXECUTE = 'STATEMENT_EXECUTE',\n    SYSTEM_METHOD_ENTRY = 'SYSTEM_METHOD_ENTRY',\n    CONSTRUCTOR_ENTRY = 'CONSTRUCTOR_ENTRY',\n    CONSTRUCTOR_EXIT = 'CONSTRUCTOR_EXIT',\n    CODE_UNIT_STARTED = 'CODE_UNIT_STARTED',\n    CODE_UNIT_FINISHED = 'CODE_UNIT_FINISHED',\n    METHOD_ENTRY = 'METHOD_ENTRY',\n    METHOD_EXIT = 'METHOD_EXIT',\n    SOQL_EXECUTE = 'SOQL_EXECUTE'\n}\n\nexport class ApexLogAction extends LogAction{\n    actions = {\n        hierarchyEntryExit(filters: any, logLines: Array<string>){\n            let tabs2Add = 0;\n            return logLines.map(line => {\n                if(filters.isEntry(line)){\n                    tabs2Add++;\n                    return filters.tabs2Add2Line(tabs2Add - 1) + line;\n                }\n    \n                if(filters.isExit(line)){\n                    if(tabs2Add  === 0){\n                        return tabs2Add;\n                    }\n    \n                    tabs2Add--;\n                }\n    \n                return filters.tabs2Add2Line(tabs2Add) + line;\n            });\n        },\n    \n        removeHeapAllocateAndStatementExecute(filters: any, logLines: Array<string>){\n            return logLines.filter(\n                line => !filters.isHeapAllocate(line) && !filters.isStatementExecute(line)\n            );\n        },\n\n        applyAll(filters: any, logLines: Array<string>, actions: any){        \n            return Object.keys(actions)\n                .filter(name => name !== 'applyAll')\n                .reduce((log2Format, action) => {\n                    return actions[action](filters, log2Format);\n                    }, logLines\n                );\n        }\n    };\n\n    filters = {\n        isHeapAllocate(line){\n            return line && line.includes(LOG_LINE_FILTER.HEAP_ALLOCATE); \n        },\n        isStatementExecute(line){\n            return line && line.includes(LOG_LINE_FILTER.STATEMENT_EXECUTE);   \n        },\n        isEntry(line){\n            return line && (line.includes(LOG_LINE_FILTER.METHOD_ENTRY) || \n                line.includes(LOG_LINE_FILTER.SYSTEM_METHOD_ENTRY) || \n                line.includes(LOG_LINE_FILTER.CONSTRUCTOR_ENTRY)) ||\n                line.includes(LOG_LINE_FILTER.CODE_UNIT_STARTED);\n        },\n        isExit(line){\n            return line && (line.includes(LOG_LINE_FILTER.METHOD_EXIT) || \n                line.includes(LOG_LINE_FILTER.SYSTEM_METHOD_ENTRY) || \n                line.includes(LOG_LINE_FILTER.CONSTRUCTOR_EXIT))  ||\n                line.includes(LOG_LINE_FILTER.CODE_UNIT_FINISHED);\n        },\n        extractSoqlLine(line){\n            return line && !line.includes(LOG_LINE_FILTER.SOQL_EXECUTE);\n        },\n        tabs2Add2Line(numberOfTabs: number){\n            let tabs2Return = numberOfTabs === 0 ? '' : '\\t';\n            for(let counter = 1; counter < numberOfTabs; counter++){\n                tabs2Return = tabs2Return + '\\t';\n            }\n            return tabs2Return;\n        }\n    };\n}","import { LogMenu } from \"../logMenu\";\n\nexport class ApexLogMenu extends LogMenu {\n    menuOptions = [\n        {\n            label: 'SFDL: Apex - Remove HEAP_ALLOCATE & STATEMENT_EXECUTE Lines',\n            name: 'removeHeapAllocateAndStatementExecute',\n        },\n        {\n            label: 'SFDL: Apex - Format Hierarchy Entry/Exit',\n            name: 'hierarchyEntryExit',\n        },\n        {\n            label: 'SFDL: Apex - Apply all actions',\n            name: 'applyAll',\n        },\n    ];\n}","import { LogValidation } from '../logValidation';\n\nexport class ApexLogValidation extends LogValidation {\n    validFilters = ['APEX_CODE'];\n    validFileExtensions = ['.log'];\n}","import { QuickPickItem } from \"vscode\";\n\nexport class DisplayMenu implements QuickPickItem {\n    label: string;\n    name: string;\n    description = '';\n    \n    constructor(public detail: string, label: string, name: string) {\n      this.label = `${label}`;\n      this.name = `${name}`;\n    }\n}","import { LogMenu } from \"../logMenu\";\n\nexport class NoMenu extends LogMenu {\n    menuOptions = [];\n}","import { ApexLog } from \"./apexLog/apexLog\";\nimport { ApexLogMenu } from \"./apexLog/apexLogMenu\";\nimport { ApexLogValidation } from \"./apexLog/apexLogValidation\";\nimport { ApexLogAction } from \"./apexLog/apexLogAction\";\nimport { NoMenu } from \"./general/noMenu\";\n\n//Map is logType => eventName => class/interface name\nconst LOG_TYPE_PROCESOR_MAPPING =  {\n    'apexLog': new ApexLog(new ApexLogMenu(), new ApexLogValidation(), new ApexLogAction()),\n    'apexLogAutoApply': new ApexLog(new NoMenu(), new ApexLogValidation(), new ApexLogAction('applyAll'))\n\n};\n\nexport class Log {\n    constructor(private _logType: string){}\n\n    process(){\n        LOG_TYPE_PROCESOR_MAPPING[this._logType].process();\n    }\n}","import { ILogAction } from \"./iLogAction\";\n\n// Define an abstract base class for a log action\nexport abstract class LogAction implements ILogAction {\n    // Abstract property for an object containing functions for log actions\n    abstract actions: any;\n    // Abstract property for an object containing functions for log filters\n    abstract filters: any;\n    // Property for an action to use as an override for the action passed to the apply method\n    actionOverride: any;\n\n    //actionOverride is meant to set the action by an implementation and not from user menu\n    constructor();\n    constructor(actionOverride: string);\n    constructor(actionOverride?: string) {\n        this.actionOverride = actionOverride ? { name: actionOverride } : '';\n    }\n\n    // Method to apply a log action to a log\n    apply(actionName: string, log: any): string {\n        // actionName is override by the value of the actionOverride if exist otherwhise uses the actionName selected by user\n        actionName = this.actionOverride ? this.actionOverride.name : actionName;\n\n        // Split log into an array of lines. Each line ends with \\n \n        let logLines = log?.split('\\n');\n        let logFormatted; \n        \n        if(logLines && actionName){\n            logFormatted = this.actions[actionName](this.filters, logLines, this.actions);\n            logFormatted.join('\\n');\n        }\n        \n        // Return logFormatted if it is truthy, or log if logFormatted is falsy\n        return logFormatted ? logFormatted.join('\\n') : log;\n    }\n}","import { DisplayMenu } from './displayMenu';\nimport * as vscode from 'vscode';\n\n// Define an abstract base class for a log menu\nexport abstract class LogMenu {\n    // Abstract property for an object containing menu options\n    abstract menuOptions: any;\n\n    // Method to get an option from the menu\n    getOption(){\n        // Get an array of menu options\n        const options = this.getMenuOptions();\n        \n        // If there are no options, return undefined\n        if(options.length === 0){\n            return;\n        }\n\n        // Return the selected option\n        return this.optionSelected(options);\n    }\n\n    // Method to get an array of menu options\n    private getMenuOptions(){\n        // Map the menuOptions object to an array of DisplayMenu objects\n        return this.menuOptions.map((action: {label: string, name: string}) => {\n            // Return a new DisplayMenu object\n            return new DisplayMenu(\n                '',\n                action.label,\n                action.name\n            );\n        });\n    }\n\n    // Method to get the selected option from the menu\n    private async optionSelected(options: any){\n        // Show the quick pick menu with the given options and store the selected option in a constant\n        const option = await vscode.window.showQuickPick(options, {\n            canPickMany: false,\n        });\n\n        // Return the selected option\n        return option;\n    }\n}","import { ILogProcessor } from \"./iLogProcessor\";\nimport { ILogValidation } from \"./iLogValidation\";\nimport { ILogAction } from \"./iLogAction\";\nimport * as vscode from 'vscode';\nimport * as utils from './utils';\nimport { LogMenu } from \"./logMenu\";\n\n// Define an abstract base class for a log processor\nexport abstract class LogProcessor implements ILogProcessor {\n    // Abstract property for a log menu\n    abstract logMenu: LogMenu;\n    // Abstract property for a log validation object\n    abstract validation: ILogValidation;\n    // Abstract property for a log action object\n    abstract action: ILogAction;\n    /**\n    * Success message to display at the end of processing\n    */\n    abstract successMessage: string;\n    /**\n    * Error message to display for invalid log\n    */\n    abstract exceptionMessage: string;\n    \n    // Method to process a log\n    async process(): Promise<void> {\n        // Get the log from the current editor\n        let log = utils.getLog();\n\n        // Check if the log is valid\n        let isValid = this.runValidation(log);\n\n        // If the log is invalid, display the exception message and return\n        if(!isValid){\n            utils.displayMessage(this.exceptionMessage);\n            return;     \n        }\n\n        // Get the selected action from the log menu\n        let actionSelected = await this.displayMenu();\n\n        // Apply the selected action to the log\n        let logFormatted = this.applyAction(actionSelected?.name, log);\n\n        // Replace the log in the current editor with the formatted log\n        this.refreshWindow(logFormatted);\n\n        // Display the success message\n        utils.displayMessage(this.successMessage);\n        // Navigate to the top of the log\n        utils.navigateTop();\n    }\n\n    // Method to display the log menu and return the selected action\n    displayMenu(): any {\n        return this.logMenu.getOption();\n    }\n\n    // Method to validate the log\n    runValidation(log: any): boolean {\n       return this.validation.validate(log);\n    }\n\n    // Method to apply an action to the log\n    applyAction(actionName: string, log: string){\n        return this.action.apply(actionName, log);\n    }\n    \n    // Method to refresh the current editor window with the given log\n    refreshWindow(log: string){\n        // Get the active text editor\n        let editor = vscode.window.activeTextEditor;\n        // Get the range of text in the current editor\n        let textRange = utils.selectAllPageContent();\n        // Replace the text in the editor with the given log\n        editor?.edit(editBuilder => {\n            editBuilder.replace(textRange, log);\n        });\n    } \n}","import { ILogValidation } from \"./iLogValidation\";\nimport * as utils from './utils';\n\n// Define an abstract base class for a log validation object\nexport abstract class LogValidation implements ILogValidation {\n    // Abstract property for an array of valid filters\n    abstract validFilters: string[];\n    // Abstract property for an array of valid file extensions\n    abstract validFileExtensions: string[];\n    \n    // Method to validate a log\n    validate(log: any): boolean {\n        // Return the result of validateFileExtension OR validateLogFile\n        return this.validateFileExtension() || this.validateLogFile(log);\n    }\n\n    // Method to validate the file extension of the log file\n    validateFileExtension(): boolean{\n        // Return true if the validFileExtensions array contains a file extension that is included in the file name\n        return this.validFileExtensions.some(fileExtension => utils.getFileName().includes(fileExtension));\n    }\n\n    // Method to validate the contents of the log file\n    validateLogFile(log: any): boolean{\n        // Return true if the validFilters array contains a value that is included in the log text\n        return this.validFilters.some(value => log.includes(value));\n    }\n}","import * as vscode from 'vscode';\n\n// Function to get the log text from the active editor\nexport function getLog(){\n    // Get the active text editor\n    let editor = vscode.window.activeTextEditor;\n    // Get the active text editor's document\n    const document = editor?.document;\n    // Get the text of the document\n    const log = document?.getText();\n    // Return the log text, or an empty string if log is falsy\n    return log || '';\n}\n\n// Function to get the file name of the active editor\nexport function getFileName(){\n    // Get the active text editor\n    let editor = vscode.window.activeTextEditor;\n    // Return the file name of the active text editor's document, or 'no log found' if editor is falsy\n    return editor ? editor.document.fileName : 'no log found';\n}\n\n// Function to get the range of text in the active editor\nexport function selectAllPageContent(){\n    // Get the active text editor\n    let editor = vscode.window.activeTextEditor;\n    let range;\n    // If editor is truthy...\n    if(editor){\n        // ...get the first and last lines of the document\n        let firstLine = editor.document.lineAt(0);\n        let lastLine = editor.document.lineAt(editor.document.lineCount - 1);\n        // ...create a range of text that spans from the start of the first line to the end of the last line\n        range = new vscode.Range(0,\n                firstLine.range.start.character,\n                editor.document.lineCount - 1,\n                lastLine.range.end.character);\n    }\n    // Return the range of text\n    return range;\n}\n\n// Function to navigate to the top of the active editor\nexport function navigateTop(){\n    // Get the active text editor\n    let editor = vscode.window.activeTextEditor;\n    // If editor is truthy...\n    if(editor){\n        // ...create a new position at the start of the document\n        var p = new vscode.Position(0,0);\n        // ...create a new selection using the new position\n        var s = new vscode.Selection(p, p);\n        // Set the selection of the editor to the new selection\n        editor.selection = s;\n        // Reveal the new selection in the editor\n        editor.revealRange(s);\n    }\n}\n\n// Function to display a message to the user\nexport function displayMessage(message){\n    // Display the message using the showInformationMessage method of the vscode.window object\n    vscode.window.showInformationMessage(message);\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { Log } from './sfdl/log';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Salesforce Debug Logs (sfdl) is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('sfdl.processLog', () => {\n\t\tnew Log('apexLog').process();\n\t});\n\tcontext.subscriptions.push(disposable);\n\n\tvscode.commands.registerCommand('sfdl.enableActionsAutoExecution', () => {\n\t\t// Update the configuration\n\t\tconst config = vscode.workspace.getConfiguration('sfdl');\n\t\tconst enableActionsAutoExecution = config.get('enableActionsAutoExecution');\n\t\tconfig.update('enableActionsAutoExecution', !enableActionsAutoExecution, true);\n\t});\n\n\tasync function handleOpenLogFile(textDocument: vscode.TextDocument) {\n\t\t// Open the file and bring it into focus\n\t\ttry{\n\t\t\tawait vscode.window.showTextDocument(textDocument);\n\t\t} catch {}\n\n\t\t// Check if the file has the .log extension and if it contains 'APEX_CODE'\n\t\tif (textDocument.uri.fsPath.endsWith('.log')) {\n\t\t\t// Check the value of the \"sfdl.enableActionsAutoExecution\" option\n\t\t\tconst enableActionsAutoExecution = vscode.workspace.getConfiguration().get('sfdl.enableActionsAutoExecution');\n\t\t\tif (enableActionsAutoExecution) {\n\t\t\t\tnew Log('apexLogAutoApply').process();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Register the event listener\n\tvscode.workspace.onDidOpenTextDocument(handleOpenLogFile);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}"],"names":["ApexLog","LogProcessor","constructor","_logMenu","_validation","_action","super","successMessage","exceptionMessage","this","logMenu","validation","action","LOG_LINE_FILTER","ApexLogAction","LogAction","actions","hierarchyEntryExit","filters","logLines","tabs2Add","map","line","isEntry","tabs2Add2Line","isExit","removeHeapAllocateAndStatementExecute","filter","isHeapAllocate","isStatementExecute","applyAll","Object","keys","name","reduce","log2Format","includes","HEAP_ALLOCATE","STATEMENT_EXECUTE","METHOD_ENTRY","SYSTEM_METHOD_ENTRY","CONSTRUCTOR_ENTRY","CODE_UNIT_STARTED","METHOD_EXIT","CONSTRUCTOR_EXIT","CODE_UNIT_FINISHED","extractSoqlLine","SOQL_EXECUTE","numberOfTabs","tabs2Return","counter","ApexLogMenu","LogMenu","menuOptions","label","ApexLogValidation","LogValidation","validFilters","validFileExtensions","detail","description","NoMenu","LOG_TYPE_PROCESOR_MAPPING","_logType","process","actionOverride","apply","actionName","log","logFormatted","split","join","getOption","options","getMenuOptions","length","optionSelected","DisplayMenu","async","vscode","window","showQuickPick","canPickMany","utils","getLog","runValidation","displayMessage","actionSelected","displayMenu","applyAction","refreshWindow","navigateTop","validate","editor","activeTextEditor","textRange","selectAllPageContent","edit","editBuilder","replace","validateFileExtension","validateLogFile","some","fileExtension","getFileName","value","document","getText","fileName","range","firstLine","lineAt","lastLine","lineCount","Range","start","character","end","p","Position","s","Selection","selection","revealRange","message","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","disposable","commands","registerCommand","Log","subscriptions","push","config","workspace","getConfiguration","enableActionsAutoExecution","get","update","onDidOpenTextDocument","textDocument","showTextDocument","uri","fsPath","endsWith"],"sourceRoot":""}